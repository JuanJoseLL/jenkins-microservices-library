package com.microservices

class DockerManager implements Serializable {
    def steps
    
    DockerManager(steps) {
        this.steps = steps
    }
    
    def buildImage(String service, String buildNumber, String semanticVersion, String dockerhubUsername) {
        steps.echo "üê≥ Construyendo imagen Docker para ${service}..."
        
        def commands = """
            cd ${service}
            # Construir la imagen con versionado sem√°ntico
            docker build -t ${service}:${buildNumber} .
            docker tag ${service}:${buildNumber} ${service}:latest
            docker tag ${service}:${buildNumber} ${service}:v${semanticVersion}
            docker tag ${service}:${buildNumber} ${dockerhubUsername}/${service}:${buildNumber}
            docker tag ${service}:${buildNumber} ${dockerhubUsername}/${service}:latest
            docker tag ${service}:${buildNumber} ${dockerhubUsername}/${service}:v${semanticVersion}
        """
        
        steps.sh commands
        
        return [
            local: "${service}:${buildNumber}",
            remote: [
                "${dockerhubUsername}/${service}:${buildNumber}",
                "${dockerhubUsername}/${service}:v${semanticVersion}"
            ]
        ]
    }
    
    def pushImage(String service, String buildNumber, String semanticVersion, String dockerhubUsername) {
        steps.echo "üì§ Publicando ${service} en Docker Hub..."
        
        steps.sh """
            # Push imagen con n√∫mero de build
            docker push ${dockerhubUsername}/${service}:${buildNumber}
            
            # Push imagen latest
            docker push ${dockerhubUsername}/${service}:latest
            
            # Push imagen con versi√≥n sem√°ntica
            docker push ${dockerhubUsername}/${service}:v${semanticVersion}
            
            echo "‚úÖ ${service} publicado exitosamente con versi√≥n v${semanticVersion}"
        """
    }
    
    def cleanup(List<String> images) {
        steps.echo "üßπ Limpiando im√°genes Docker..."
        
        images.each { image ->
            steps.sh """
                docker rmi ${image} || echo "‚ö†Ô∏è  No se pudo remover ${image}"
            """
        }
        
        steps.sh """
            # Remover im√°genes sin usar (dangling)
            docker image prune -f || echo "‚ö†Ô∏è  No se pudo ejecutar image prune"
            
            # Mostrar espacio liberado
            echo "üìä Estado actual de Docker:"
            docker system df || echo "‚ö†Ô∏è  No se pudo obtener informaci√≥n del sistema Docker"
        """
    }
}